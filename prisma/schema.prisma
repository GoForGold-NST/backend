generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String     @id @default(uuid())
    fullName  String
    email     String     @unique
    password  String
    ICPCElite ICPCElite?
    IOI       IOI?
}

model Admin {
    id       String @id @default(uuid())
    email    String
    password String
}

model IOI {
    id                           String            @id @default(uuid())
    userId                       String            @unique
    email                        String
    fullName                     String
    DOB                          DateTime
    candidateContact             BigInt
    candidateAdhaar              BigInt
    schoolName                   String
    city                         String
    grade                        BigInt
    codeforcesUsername           String?
    codeforcesRating             BigInt?
    codechefUsername             String?
    codechefRating               BigInt?
    olympiadParticipationHistory YesNo             @default(NO)
    olympiadPerformance          String?
    CPAchievements               String?
    chennaiParticipation         YesNo             @default(NO)
    volunteerInterest            volunteerInterest @default(NO)
    campInterest                 String
    guardianName                 String
    guardianContact              BigInt
    guardianEmail                String
    TShirtSize                   String
    allergies                    String?
    paymentMade                  PaymentStatus     @default(pending)
    createdAt                    DateTime          @default(now())
    updatedAt                    DateTime          @updatedAt
    EventCheckIn                 EventCheckIn[]
    user                         User              @relation(fields: [userId], references: [id])
}

model EventCheckIn {
    id          String   @id @default(uuid())
    ioiId       String
    checkedInBy String
    createdAt   DateTime @default(now())
    ioi         IOI      @relation(fields: [ioiId], references: [id])
}

model ICPCElite {
    id                    String        @id @default(uuid())
    userId                String        @unique
    fullName              String
    email                 String
    phone                 String
    dateOfBirth           DateTime
    gender                String?
    address               String?
    city                  String
    state                 String?
    pincode               String?
    currentEducation      String
    instituteName         String
    graduationYear        String?
    cgpa                  String?
    branch                String?
    semester              String?
    programmingExperience String
    favoriteLanguages     String[]
    codingPlatforms       String[]
    githubProfile         String?
    linkedinProfile       String?
    icpcParticipation     String
    icpcRank              String?
    codeforcesHandle      String?
    codeforcesRating      String?
    codechefHandle        String?
    codechefRating        String?
    otherCompetitions     String?
    achievements          String?
    expectationsFromCamp  String
    areasOfInterest       String[]
    teamExperience        String?
    accommodation         String?
    dietaryRestrictions   String?
    emergencyContact      String
    emergencyPhone        String
    heardAboutCamp        String?
    additionalInfo        String?
    paymentStatus         PaymentStatus @default(pending)
    createdAt             DateTime      @default(now())
    updatedAt             DateTime      @updatedAt
    User                  User          @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
    pending
    success
}

enum YesNo {
    YES
    NO

    @@map("Bool")
}

enum volunteerInterest {
    YES
    NO
    WILLTRYMYBEST
    MAYBE
}
